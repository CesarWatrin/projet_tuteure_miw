/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/tile.stamen.js":
/*!*************************************!*\
  !*** ./resources/js/tile.stamen.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function (exports) {\n  /*\r\n   * tile.stamen.js v1.3.0\r\n   */\n  var SUBDOMAINS = \"a. b. c. d.\".split(\" \"),\n      MAKE_PROVIDER = function MAKE_PROVIDER(layer, type, minZoom, maxZoom) {\n    return {\n      \"url\": [\"https://{S}tile.stamen.com/\", layer, \"/{Z}/{X}/{Y}.\", type].join(\"\"),\n      \"type\": type,\n      \"subdomains\": SUBDOMAINS.slice(),\n      \"minZoom\": minZoom,\n      \"maxZoom\": maxZoom,\n      \"attribution\": ['Map tiles by <a href=\"http://stamen.com/\">Stamen Design</a>, ', 'under <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a>. ', 'Data by <a href=\"http://openstreetmap.org/\">OpenStreetMap</a>, ', 'under <a href=\"http://creativecommons.org/licenses/by-sa/3.0\">CC BY SA</a>.'].join(\"\")\n    };\n  },\n      PROVIDERS = {\n    \"toner\": MAKE_PROVIDER(\"toner\", \"png\", 0, 20),\n    \"terrain\": MAKE_PROVIDER(\"terrain\", \"png\", 0, 18),\n    \"terrain-classic\": MAKE_PROVIDER(\"terrain-classic\", \"png\", 0, 18),\n    \"watercolor\": MAKE_PROVIDER(\"watercolor\", \"jpg\", 1, 18),\n    \"trees-cabs-crime\": {\n      \"url\": \"http://{S}.tiles.mapbox.com/v3/stamen.trees-cabs-crime/{Z}/{X}/{Y}.png\",\n      \"type\": \"png\",\n      \"subdomains\": \"a b c d\".split(\" \"),\n      \"minZoom\": 11,\n      \"maxZoom\": 18,\n      \"extent\": [{\n        \"lat\": 37.853,\n        \"lon\": -122.577\n      }, {\n        \"lat\": 37.684,\n        \"lon\": -122.313\n      }],\n      \"attribution\": ['Design by Shawn Allen at <a href=\"http://stamen.com/\">Stamen</a>.', 'Data courtesy of <a href=\"http://fuf.net/\">FuF</a>,', '<a href=\"http://www.yellowcabsf.com/\">Yellow Cab</a>', '&amp; <a href=\"http://sf-police.org/\">SFPD</a>.'].join(\" \")\n    }\n  };\n\n  PROVIDERS[\"terrain-classic\"].url = \"http://{S}tile.stamen.com/terrain/{Z}/{X}/{Y}.png\"; // set up toner and terrain flavors\n\n  setupFlavors(\"toner\", [\"hybrid\", \"labels\", \"lines\", \"background\", \"lite\"]);\n  setupFlavors(\"terrain\", [\"background\", \"labels\", \"lines\"]); // toner 2010\n\n  deprecate(\"toner\", [\"2010\"]); // toner 2011 flavors\n\n  deprecate(\"toner\", [\"2011\", \"2011-lines\", \"2011-labels\", \"2011-lite\"]);\n  var odbl = [\"toner\", \"toner-hybrid\", \"toner-labels\", \"toner-lines\", \"toner-background\", \"toner-lite\", \"terrain\", \"terrain-background\", \"terrain-lines\", \"terrain-labels\", \"terrain-classic\"];\n\n  for (var i = 0; i < odbl.length; i++) {\n    var key = odbl[i];\n    PROVIDERS[key].retina = true;\n    PROVIDERS[key].attribution = ['Map tiles by <a href=\"http://stamen.com/\">Stamen Design</a>, ', 'under <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a>. ', 'Data by <a href=\"http://openstreetmap.org\">OpenStreetMap</a>, ', 'under <a href=\"http://www.openstreetmap.org/copyright\">ODbL</a>.'].join(\"\");\n  }\n  /*\r\n   * Export stamen.tile to the provided namespace.\r\n   */\n\n\n  exports.stamen = exports.stamen || {};\n  exports.stamen.tile = exports.stamen.tile || {};\n  exports.stamen.tile.providers = PROVIDERS;\n  exports.stamen.tile.getProvider = getProvider;\n\n  function deprecate(base, flavors) {\n    var provider = getProvider(base);\n\n    for (var i = 0; i < flavors.length; i++) {\n      var flavor = [base, flavors[i]].join(\"-\");\n      PROVIDERS[flavor] = MAKE_PROVIDER(flavor, provider.type, provider.minZoom, provider.maxZoom);\n      PROVIDERS[flavor].deprecated = true;\n    }\n  }\n\n  ;\n  /*\r\n   * A shortcut for specifying \"flavors\" of a style, which are assumed to have the\r\n   * same type and zoom range.\r\n   */\n\n  function setupFlavors(base, flavors, type) {\n    var provider = getProvider(base);\n\n    for (var i = 0; i < flavors.length; i++) {\n      var flavor = [base, flavors[i]].join(\"-\");\n      PROVIDERS[flavor] = MAKE_PROVIDER(flavor, type || provider.type, provider.minZoom, provider.maxZoom);\n    }\n  }\n  /*\r\n   * Get the named provider, or throw an exception if it doesn't exist.\r\n   */\n\n\n  function getProvider(name) {\n    if (name in PROVIDERS) {\n      var provider = PROVIDERS[name];\n\n      if (provider.deprecated && console && console.warn) {\n        console.warn(name + \" is a deprecated style; it will be redirected to its replacement. For performance improvements, please change your reference.\");\n      }\n\n      return provider;\n    } else {\n      throw 'No such provider (' + name + ')';\n    }\n  }\n  /*\r\n   * StamenTileLayer for modestmaps-js\r\n   * <https://github.com/modestmaps/modestmaps-js/>\r\n   *\r\n   * Works with both 1.x and 2.x by checking for the existence of MM.Template.\r\n   */\n\n\n  if ((typeof MM === \"undefined\" ? \"undefined\" : _typeof(MM)) === \"object\") {\n    var ModestTemplate = typeof MM.Template === \"function\" ? MM.Template : MM.TemplatedMapProvider;\n\n    MM.StamenTileLayer = function (name) {\n      var provider = getProvider(name);\n      this._provider = provider;\n      MM.Layer.call(this, new ModestTemplate(provider.url, provider.subdomains));\n      this.provider.setZoomRange(provider.minZoom, provider.maxZoom);\n      this.attribution = provider.attribution;\n    };\n\n    MM.StamenTileLayer.prototype = {\n      setCoordLimits: function setCoordLimits(map) {\n        var provider = this._provider;\n\n        if (provider.extent) {\n          map.coordLimits = [map.locationCoordinate(provider.extent[0]).zoomTo(provider.minZoom), map.locationCoordinate(provider.extent[1]).zoomTo(provider.maxZoom)];\n          return true;\n        } else {\n          return false;\n        }\n      }\n    };\n    MM.extend(MM.StamenTileLayer, MM.Layer);\n  }\n  /*\r\n   * StamenTileLayer for Leaflet\r\n   * <http://leaflet.cloudmade.com/>\r\n   *\r\n   * Tested with version 0.3 and 0.4, but should work on all 0.x releases.\r\n   */\n\n\n  if ((typeof L === \"undefined\" ? \"undefined\" : _typeof(L)) === \"object\") {\n    L.StamenTileLayer = L.TileLayer.extend({\n      initialize: function initialize(name, options) {\n        var provider = getProvider(name),\n            url = provider.url.replace(/({[A-Z]})/g, function (s) {\n          return s.toLowerCase();\n        }),\n            opts = L.Util.extend({}, options, {\n          \"minZoom\": provider.minZoom,\n          \"maxZoom\": provider.maxZoom,\n          \"subdomains\": provider.subdomains,\n          \"scheme\": \"xyz\",\n          \"attribution\": provider.attribution,\n          sa_id: name\n        });\n        L.TileLayer.prototype.initialize.call(this, url, opts);\n      }\n    });\n    /*\r\n     * Factory function for consistency with Leaflet conventions\r\n     */\n\n    L.stamenTileLayer = function (options, source) {\n      return new L.StamenTileLayer(options, source);\n    };\n  }\n  /*\r\n   * StamenTileLayer for OpenLayers\r\n   * <http://openlayers.org/>\r\n   *\r\n   * Tested with v2.1x.\r\n   */\n\n\n  if ((typeof OpenLayers === \"undefined\" ? \"undefined\" : _typeof(OpenLayers)) === \"object\") {\n    // make a tile URL template OpenLayers-compatible\n    var openlayerize = function openlayerize(url) {\n      return url.replace(/({.})/g, function (v) {\n        return \"$\" + v.toLowerCase();\n      });\n    }; // based on http://www.bostongis.com/PrinterFriendly.aspx?content_name=using_custom_osm_tiles\n\n\n    OpenLayers.Layer.Stamen = OpenLayers.Class(OpenLayers.Layer.OSM, {\n      initialize: function initialize(name, options) {\n        var provider = getProvider(name),\n            url = provider.url,\n            subdomains = provider.subdomains,\n            hosts = [];\n\n        if (url.indexOf(\"{S}\") > -1) {\n          for (var i = 0; i < subdomains.length; i++) {\n            hosts.push(openlayerize(url.replace(\"{S}\", subdomains[i])));\n          }\n        } else {\n          hosts.push(openlayerize(url));\n        }\n\n        options = OpenLayers.Util.extend({\n          \"numZoomLevels\": provider.maxZoom,\n          \"buffer\": 0,\n          \"transitionEffect\": \"resize\",\n          // see: <http://dev.openlayers.org/apidocs/files/OpenLayers/Layer/OSM-js.html#OpenLayers.Layer.OSM.tileOptions>\n          // and: <http://dev.openlayers.org/apidocs/files/OpenLayers/Tile/Image-js.html#OpenLayers.Tile.Image.crossOriginKeyword>\n          \"tileOptions\": {\n            \"crossOriginKeyword\": null\n          },\n          \"attribution\": provider.attribution\n        }, options);\n        return OpenLayers.Layer.OSM.prototype.initialize.call(this, name, hosts, options);\n      }\n    });\n  }\n  /*\r\n   * StamenMapType for Google Maps API V3\r\n   * <https://developers.google.com/maps/documentation/javascript/>\r\n   */\n\n\n  if ((typeof google === \"undefined\" ? \"undefined\" : _typeof(google)) === \"object\" && _typeof(google.maps) === \"object\") {\n    // Extending Google class based on a post by Bogart Salzberg of Portland Webworks,\n    // http://www.portlandwebworks.com/blog/extending-googlemapsmap-object\n    google.maps.ImageMapType = function (_constructor) {\n      var f = function f() {\n        if (!arguments.length) {\n          return;\n        }\n\n        _constructor.apply(this, arguments);\n      };\n\n      f.prototype = _constructor.prototype;\n      return f;\n    }(google.maps.ImageMapType);\n\n    google.maps.StamenMapType = function (name) {\n      var provider = getProvider(name),\n          subdomains = provider.subdomains;\n      return google.maps.ImageMapType.call(this, {\n        \"getTileUrl\": function getTileUrl(coord, zoom) {\n          var numTiles = 1 << zoom,\n              wx = coord.x % numTiles,\n              x = wx < 0 ? wx + numTiles : wx,\n              y = coord.y,\n              index = (zoom + x + y) % subdomains.length;\n          return provider.url.replace(\"{S}\", subdomains[index]).replace(\"{Z}\", zoom).replace(\"{X}\", x).replace(\"{Y}\", y);\n        },\n        \"tileSize\": new google.maps.Size(256, 256),\n        \"name\": name,\n        \"minZoom\": provider.minZoom,\n        \"maxZoom\": provider.maxZoom\n      });\n    }; // FIXME: is there a better way to extend classes in Google land?\n    // Possibly fixed, see above ^^^ | SC\n\n\n    google.maps.StamenMapType.prototype = new google.maps.ImageMapType();\n  }\n})( false ? 0 : exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/tile.stamen.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	// startup
/******/ 	// Load entry module
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	__webpack_require__("./resources/js/tile.stamen.js");
/******/ })()
;